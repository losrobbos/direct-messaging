[{"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/2-chat-simple/chat-ui/src/App.js":"1","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/App.js":"2","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/ChatHistory.js":"3","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/ContactList.js":"4","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/reportWebVitals.js":"5","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/index.js":"6","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/helpers/axios.js":"7","/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/Login.jsx":"8"},{"size":2276,"mtime":1616770328921,"results":"9","hashOfConfig":"10"},{"size":2460,"mtime":1621675251689,"results":"11","hashOfConfig":"12"},{"size":2041,"mtime":1621677321135,"results":"13","hashOfConfig":"12"},{"size":461,"mtime":1621675061179,"results":"14","hashOfConfig":"12"},{"size":362,"mtime":1620229484949,"results":"15","hashOfConfig":"12"},{"size":455,"mtime":1620229484949,"results":"16","hashOfConfig":"12"},{"size":217,"mtime":1621672332960,"results":"17","hashOfConfig":"12"},{"size":1084,"mtime":1621674961186,"results":"18","hashOfConfig":"12"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"pcuffp",{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1s0wi6h",{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/2-chat-simple/chat-ui/src/App.js",["37"],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/App.js",["38","39"],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/ChatHistory.js",["40","41","42"],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/ContactList.js",["43","44","45"],"const ContactList = ({ user, contacts, contact, setContact }) => {\n\n  const jsxContacts = contacts.map(ctc => {\n\n    if(user._id == ctc._id) return\n\n    return <div className=\"contact\" key={ctc._id} onClick={(e) => setContact(ctc)} >\n      { contact && contact._id == ctc._id ? <b>{ctc.username}</b> : ctc.username }\n    </div>\n  })\n\n  return ( <div className=\"contacts\">\n    <h2>Contact List</h2>\n    { jsxContacts }\n  </div> );\n}\n \nexport default ContactList;",["46","47"],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/reportWebVitals.js",[],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/index.js",[],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/helpers/axios.js",[],"/home/rob-fujitsu/DCI/lectures/04-workshops/4-chat-sockets/5-direct-messaging/client/src/Login.jsx",[],{"ruleId":"48","severity":1,"message":"49","line":11,"column":20,"nodeType":"50","messageId":"51","endLine":11,"endColumn":31},{"ruleId":"48","severity":1,"message":"52","line":2,"column":21,"nodeType":"50","messageId":"51","endLine":2,"endColumn":27},{"ruleId":"53","severity":1,"message":"54","line":57,"column":6,"nodeType":"55","endLine":57,"endColumn":15,"suggestions":"56"},{"ruleId":"48","severity":1,"message":"57","line":1,"column":29,"nodeType":"50","messageId":"51","endLine":1,"endColumn":37},{"ruleId":"58","severity":1,"message":"59","line":18,"column":31,"nodeType":"60","messageId":"61","endLine":18,"endColumn":33},{"ruleId":"53","severity":1,"message":"62","line":28,"column":6,"nodeType":"55","endLine":28,"endColumn":27,"suggestions":"63"},{"ruleId":"58","severity":1,"message":"64","line":5,"column":17,"nodeType":"60","messageId":"61","endLine":5,"endColumn":19},{"ruleId":"65","severity":1,"message":"66","line":5,"column":29,"nodeType":"67","messageId":"68","endLine":5,"endColumn":35},{"ruleId":"58","severity":1,"message":"64","line":8,"column":32,"nodeType":"60","messageId":"61","endLine":8,"endColumn":34},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},"no-unused-vars","'setUserName' is assigned a value but never used.","Identifier","unusedVar","'useRef' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user._id'. Either include it or remove the dependency array.","ArrayExpression",["73"],"'useState' is defined but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'contact._id' and 'setChatHistory'. Either include them or remove the dependency array. If 'setChatHistory' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["74"],"Expected '===' and instead saw '=='.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","no-native-reassign",["75"],"no-negated-in-lhs",["76"],{"desc":"77","fix":"78"},{"desc":"79","fix":"80"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [contact, user._id]",{"range":"81","text":"82"},"Update the dependencies array to be: [socket, chatHistory, contact._id, setChatHistory]",{"range":"83","text":"84"},[1600,1609],"[contact, user._id]",[748,769],"[socket, chatHistory, contact._id, setChatHistory]"]